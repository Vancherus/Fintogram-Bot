from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup

from common.services import get_menu_text, get_user_thoughts_text, get_user_info_text

from database.orm_query import (orm_add_thought, 
                                orm_get_user_by_username,
                                orm_delete_thought,
                                orm_transfer_thought,
                                orm_get_thought_by_id,
                                has_been_transferred,
                                User
                                )

from kbds.inline import MenuCallback, get_menu_with_back, ChainCallback # inline_chains
from kbds.reply import start_kb, transfer_kb

from database.engine import session_maker

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from statemachine.states import ThoughtStates, TransferStates, DeleteStates


user_private_router = Router()


##################### INLINE 1 #####################################

@user_private_router.message(CommandStart()) # handler for /start
async def cmd_start(message: Message):
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    text = get_menu_text("main", user_first_name=message.from_user.first_name)
    markup = get_menu_with_back(level=0, current="main")
    await message.answer(text, reply_markup=markup) # inline-buttons
    
    # –î–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=start_kb) 
    

########################################################

@user_private_router.callback_query(MenuCallback.filter())
async def process_menu(callback: CallbackQuery, callback_data: MenuCallback):
    menu_name = callback_data.menu_name
    level = callback_data.level
    user_id = callback.from_user.id

    if menu_name == "my_thoughts":
        text = await get_user_thoughts_text(user_id)
    elif menu_name == "my_data":
        text = await get_user_info_text(user_id)  
    else:
        text = get_menu_text(menu_name, user_first_name=callback.from_user.first_name)

    markup = get_menu_with_back(level=level, current=menu_name)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    
##################### INLINE 2 #####################################
    
# –°–ª–æ–≤–∞—Ä—å –æ–ø–∏—Å–∞–Ω–∏–π —Å–µ—Ç–µ–π
CHAIN_DESCRIPTIONS = {
    'ü™ê –ù–µ–øTON': 'ü™ê –ù–µ–øTON ‚Äî –≤—Ç–æ—Ä–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞ TON. –ù–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –¥–∞–ª—ë–∫–æ–π –ª–µ–¥—è–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã. –ì–∞–∑ –º–∏–Ω–∏–º–∞–ª–µ–Ω, —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.',
    'üí† ETH–∏—Ä–∏–¥–∞': 'üí† ETH–∏—Ä–∏–¥–∞ ‚Äî –º–∞—Å—Ç–æ–¥–æ–Ω—Ç –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ DeFi. –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ ETH —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–Ω–∏–º–∏ –∏–∑ —Å–∞–º—ã—Ö –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ –ì–∞–ª–∞–∫—Ç–∏–∫–µ. –í—ã—à–µ–ª –≤ —ç—Ñ–∏—Ä –µ—â—ë –≤ 2015 –≥–æ–¥—É.',
    'üßä BIT–∫—É—Ä–∏–π': 'üßä BIT–∫—É—Ä–∏–π ‚Äî —Ö–æ–ª–æ–¥–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –∏ —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–º–æ–∫ –í–µ–ª–∏–∫–æ–≥–æ –ü–µ—Ä–≤–æ–±–ª–æ–∫a. –í—ã–±–∏—Ä–∞—é—Ç —Ç–µ, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –±–∏—Ç–∫–æ–∏–Ω–∞, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å —ç–ø–æ—Ö—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.',
    'üõ∞Ô∏è –ü–ª—ÉTRON': 'üõ∞Ô∏è –ü–ª—ÉTRON ‚Äî –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–ª–æ–∫—á–µ–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ –∫–æ—Å–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç DAO-—Å—Ç–∞–Ω—Ü–∏–∏. –ò–Ω–æ–≥–¥–∞ —Ç–∞–º –±—ã–≤–∞–µ—Ç –≤–µ—Å–µ–ª–æ.',
    'üåû SOL–Ω—Ü–µ': 'üåû SOL–Ω—Ü–µ ‚Äî –ø–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–¥–Ω–∏ –∏–∑ —Å–∞–º—ã—Ö –≥–æ—Ä—è—á–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ò–∑–≤–µ—Å—Ç–µ–Ω —Å–∫–æ—Ä–æ—Å—Ç—å—é, –∫–∞–∫ —É —Å–≤–µ—Ç–∞. –Ø—Ä—á–∞–π—à–∞—è –∑–≤–µ–∑–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –±–ª–æ–∫—á–µ–π–Ω–æ–≤.'
}

@user_private_router.callback_query(ChainCallback.filter())
async def chain_selected_handler(callback: CallbackQuery, callback_data: ChainCallback):
    chain_name = callback_data.name
    description = CHAIN_DESCRIPTIONS.get(chain_name, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–µ–π
    back_markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=MenuCallback(level=1, menu_name="chains").pack()
            )
        ]
    ])

    await callback.message.edit_text(
        text=f"<b>{chain_name}</b>\n\n{description}",
        reply_markup=back_markup,
        parse_mode="HTML"
    )    
##################### REPLY #####################################    
    
##################### FSM-handlers #######################################    
    
# We're processing the reply button "‚úç –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É"
@user_private_router.message(F.text == "‚úç –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É")
async def prompt_for_thought(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã:")
    await state.set_state(ThoughtStates.writing)    
    
@user_private_router.message(ThoughtStates.writing)
async def save_thought(message: Message, state: FSMContext, session: AsyncSession):
    # Check if the message is a command or the text of another reply button
    if message.text in ["üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É"]:
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–æ–¥ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()  
        return
    
    text = message.text.strip() # type: ignore
    
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã.")
        return

    if len(text) > 500:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    try:
        await orm_add_thought(session, message.from_user.id, text)
        await message.answer("‚úÖ –í–∞—à–∞ –º—ã—Å–ª–µ—Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # logging:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É: {e}")

    await state.clear()    
    
# We're processing the reply button "üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π"  
@user_private_router.message(F.text == "üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π")
async def start_transfer(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏ ID –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n@username S0kr_JTZZzk")
    await state.set_state(TransferStates.input_username_and_thought_id)
    
@user_private_router.message(TransferStates.input_username_and_thought_id)
async def process_input(message: Message, state: FSMContext):
    # Check if the message is a command or the text of another reply button
    if message.text in ["üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É"]:
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return
    
    try:
        username, thought_id = message.text.strip().split()
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username S0kr_JTZZzk")

    # check: does the sender have such a thoughtform?
    # check: is the recipient registered?

    await state.update_data(recipient_username=username, thought_id=thought_id)  
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω:", reply_markup=ReplyKeyboardMarkup(keyboard=transfer_kb, resize_keyboard=True))
    await state.set_state(TransferStates.choosing_blockchain) 

@user_private_router.message(TransferStates.choosing_blockchain)
async def choose_blockchain(message: Message, state: FSMContext, bot: Bot):

    blockchain = message.text.strip()
    data = await state.get_data()
    recipient_username = data["recipient_username"]
    thought_id = data["thought_id"]

    if recipient_username.startswith("@"):
        recipient_username = recipient_username[1:]

    await state.update_data(blockchain=blockchain)

    # Get the recipient's user_id by username
    async with session_maker() as session:
        recipient = await orm_get_user_by_username(session, recipient_username)
    
    if not recipient:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —é–∑–µ—Ä–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É –µ—â–µ —Ä–∞–∑.", reply_markup=start_kb)
        await state.clear()
        return  
    
    # Checking whether such a thought form exists
    async with session_maker() as session:
        thought = await orm_get_thought_by_id(session, thought_id)

    if not thought:
        await message.answer("‚ùå –ú—ã—Å–ª–µ—Ñ–æ—Ä–º–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=start_kb)
        await state.clear()
        return
    
    # üîí Check: has this thought form already been transferred to this recipient?
    async with session_maker() as session:
        already_transferred = await has_been_transferred(session, thought_id, recipient_username)

    if already_transferred:
        await message.answer(
            f"‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç—É –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}.",
            reply_markup=start_kb
        )
        await state.clear()
        return
    
    recipient_id = recipient.id
    
    sender = message.from_user
    sender_link = (f"@{sender.username}" if sender.username else f'<a href="tg://user?id={sender.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>')
    await bot.send_message(
        recipient_id,
        f"{sender_link} —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–º –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É —Å ID: `{thought_id}` –≤ –±–ª–æ–∫—á–µ–π–Ω–µ {blockchain}. –ü—Ä–∏–Ω—è—Ç—å?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"accept:{thought_id}:{message.from_user.id}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"decline:{message.from_user.id}:{thought_id}"),
                ]
            ]
        )
    )

    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç.", reply_markup=start_kb)
    await state.clear()

@user_private_router.callback_query(F.data.startswith("accept"))
async def handle_accept_thought(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã.
    –ü—Ä–∏–º–µ—Ä callback_data: "accept:<thought_id>:<sender_id>"
    """

    try:
        _, thought_id, sender_id = callback.data.split(":")
        sender_id = int(sender_id)
    except (ValueError, AttributeError):
        await callback.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã.")
        return

    receiver_username = callback.from_user.username  or f"id{callback.from_user.id}"
    
    # Get the sender's name from the database
    stmt = select(User).where(User.id == sender_id)
    result = await session.execute(stmt)
    sender = result.scalar_one_or_none()
    sender_link = (f"@{sender.username}" if sender.username else f'<a href="tg://user?id={sender.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>')
    #sender_username = sender.username if sender and sender.username else f"id{sender_id}"

    try:
        _, new_thought = await orm_transfer_thought(
            session=session,
            thought_id=thought_id,
            sender_id=sender_id,
            receiver_username=receiver_username,
        )
    except Exception as e:
        import traceback
        traceback.print_exc()
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã.")
        return

    await callback.message.edit_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ–π –º—ã—Å–ª–µ—Ñ–æ—Ä–º–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π ID: <code>{new_thought.id}</code>. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–µ –æ—Ç {sender_link}. C–ø–∏—Å–æ–∫ –º—ã—Å–ª–µ—Ñ–æ—Ä–º –æ–±–Ω–æ–≤–ª–µ–Ω.",
                                     parse_mode="HTML")
    await bot.send_message(sender_id, f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{receiver_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É!", parse_mode="HTML")

@user_private_router.callback_query(F.data.startswith("decline"))
async def decline_thought_transfer(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    _, sender_id, _ = callback.data.split(":")
    sender_id = int(sender_id)
    
    receiver_username = callback.from_user.username or f"id{callback.from_user.id}"
    
    # Get the sender's name from the database
    stmt = select(User).where(User.id == sender_id)
    result = await session.execute(stmt)
    sender = result.scalar_one_or_none()
    sender_link = (f"@{sender.username}" if sender.username else f'<a href="tg://user?id={sender.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>')


    await callback.message.edit_text(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É –æ—Ç {sender_link}.", parse_mode='HTML')
    await bot.send_message(sender_id, f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{receiver_username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É.", parse_mode='HTML') 
    
# We're processing the reply button "‚úçÔ∏è –£–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É"
@user_private_router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É")
async def delete_for_thought(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteStates.input_thought_id)           
    
@user_private_router.message(DeleteStates.input_thought_id)
async def delete_thought(message: Message, state: FSMContext, session: AsyncSession):
    # Check if the message is a command or the text of another reply button
    if message.text in ["üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É"]:
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()  
        return
    
    text = message.text.strip() # type: ignore
    
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã.")
        return

    if len(text) > 11:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        success = await orm_delete_thought(session, text, message.from_user.id)
        if success:
            await message.answer("‚úÖ –í–∞—à–∞ –º—ã—Å–ª–µ—Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –ú—ã—Å–ª–µ—Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º—ã—Å–ª–µ—Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º—ã—Å–ª–µ—Ñ–æ—Ä–º—É: {e}")    

    await state.clear()        
    
##################### OTHER COMMANDS #####################################    
    
@user_private_router.message(F.text == '/info')
async def get_info(message: Message):
    await message.answer('üöÄ <b>Fintogram</b> - —ç—Ç–æ –ø–µ—Ä–≤–∞—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –º—ã—Å–ª–µ—Ñ–æ—Ä–º, –∫–æ—à–µ–ª–µ–∫, '
                          '–ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏—Ö —Ö—Ä–∞–Ω–∏—Ç—å/–ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –∏ —Ü–µ–ª–∞—è –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞.\n\n' 
                          'üß† <b>–ú—ã—Å–ª–µ—Ñ–æ—Ä–º–∞</b> ‚Äî —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–≤–æ–µ–π –∏–¥–µ–∏, —Å–Ω–∞–±–∂—ë–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID. –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–≤–æ–∏–º–∏ –º—ã—Å–ª–µ—Ñ–æ—Ä–º–∞–º–∏, '
                          '—Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ. –ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –∑–Ω–∞–Ω–∏—è - —Å–∞–º–∞—è —Ü–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ –ì–∞–ª–∞–∫—Ç–∏–∫–µ!\n\n'
                          'üîó –§—É–Ω–∫—Ü–∏—è <i>"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª–µ—Ñ–æ—Ä–º–æ–π"</i> –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –∏–¥–µ—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
                          ' (–¥–ª—è –Ω–µ–≥–æ –º—ã—Å–ª–µ—Ñ–æ—Ä–º–∞ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID), –æ–¥–Ω–∞–∫–æ –µ–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ –≤ –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ —Ç–æ–±–æ–π. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ "share-–∏–Ω–≥–∞"!', parse_mode='HTML')    

@user_private_router.message(Command("developer"))
async def get_developer(message: Message):
    await message.answer('–°–æ–æ–±—â–∏—Ç—å —á—Ç–æ-—Ç–æ/–ø–æ–±–æ–ª—Ç–∞—Ç—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: –∑–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π username')
      
@user_private_router.message()
async def fallback_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("‚õîÔ∏è –í—ã –Ω–∞—á–∞–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    else:
        await message.answer("üôã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=start_kb)

@user_private_router.message(Command("cancel")) # command /cancel
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=start_kb)
   
           
